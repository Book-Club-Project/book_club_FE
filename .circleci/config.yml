# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  push:
    branches:
      - main
      - development
  pull_request:

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.7.2']

    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: install dependencies
      run: bundle install
    - name: Setup Database
      run: |
        cp config/database.yml.github-actions config/database.yml
        bundle exec rake db:create
        bundle exec rake db:schema:load
      env:
        RAILS_ENV: test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: Run RSpec
      run: COVERAGE=true bundle exec rspec  --require rails_helper
      env:
        RAILS_ENV: test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres


#  version: 2.1 # Use 2.1 to enable using orbs and other features.
#
# # Declare the orbs that we'll use in our config.
# # read more about orbs: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   ruby: circleci/ruby@1.0
#   node: circleci/node@2
#
# jobs:
#   build: # our first job, named "build"
#     docker:
#       - image: cimg/ruby:2.7-node # use a tailored CircleCI docker image.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#     steps:
#       - checkout # pull down our git code.
#       - ruby/install-deps # use the ruby orb to install dependencies
#       # use the node orb to install our packages
#       # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
#       # learn more: https://circleci.com/docs/2.0/caching/
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#
#   test:  # our next job, called "test"
#     # we run "parallel job containers" to enable speeding up our tests;
#     # this splits our tests across multiple containers.
#     parallelism: 3
#     # here we set TWO docker images.
#     docker:
#       - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#       - image: cimg/postgres:14.0
#         auth:
#           username: mydockerhub-user
#           password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
#         environment: # add POSTGRES environment variables.
#           POSTGRES_USER: circleci-demo-ruby
#           POSTGRES_DB: rails_blog_test
#           POSTGRES_PASSWORD: ""
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: ""
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - checkout
#       - ruby/install-deps
#       - node/install-packages:
#           pkg-manager: yarn
#           cache-key: "yarn.lock"
#       # Here we make sure that the secondary container boots
#       # up before we run operations on the database.
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
#       # Run rspec in parallel
#       - ruby/rspec-test
#
# # We use workflows to orchestrate the jobs that we declared above.
# workflows:
#   version: 2
#   build_and_test:     # The name of our workflow is "build_and_test"
#     jobs:             # The list of jobs we run as part of this workflow.
#       - build         # Run build first.
#       - test:         # Then run test,
#           requires:   # Test requires that build passes for it to run.
#             - build   # Finally, run the build job.
